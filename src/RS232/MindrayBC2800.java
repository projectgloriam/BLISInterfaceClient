package RS232;

import BLIS.sampledata;
import configuration.xmlparser;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import log.DisplayMessageType;
import system.SampleDataJSON;
import system.settings;
import system.utilities;

/**
 *
 * @author ISSAKA FAISAL
 */
public class MindrayBC2800 extends Thread{
        
    private static List<String> testIDs = new ArrayList<String>();
   
   
     static final char Start_Block = (char)2;
     static final char End_Block = (char)3;
     static final char CARRIAGE_RETURN = 13;
     static final char SUB = 0x1A; 
     
    private static StringBuilder datarecieved = new StringBuilder();
    private static int TestStart;
    
  @Override
    public void run() 
    {
        log.AddToDisplay.Display("Mindray BC-2800 handler started...", DisplayMessageType.TITLE);
        log.AddToDisplay.Display("Checking available ports on this system...", DisplayMessageType.INFORMATION);
        String[] ports = Manager.getSerialPorts();
        log.AddToDisplay.Display("Avaliable ports:", DisplayMessageType.TITLE);
        for(int i = 0; i < ports.length; i++)
        {           
            log.AddToDisplay.Display(ports[i],log.DisplayMessageType.INFORMATION);
        }            
        log.AddToDisplay.Display("Now connecting to port "+RS232Settings.COMPORT , DisplayMessageType.TITLE);
        if(Manager.openPortforData("Mindray BC-2800"))
        {
           log.AddToDisplay.Display("Connected sucessfully",DisplayMessageType.INFORMATION);   
           setTestIDs();
            
            //MindrayBC2800.HandleDataInput("A00007071006082017085101970054001801252720936353400860300084302521662860798089145***0484000000000000001000000100801022550161460242140000000000000000000000000000000000000000000000001002003005009013020028040055072089107123137147153156155151145137128119111103096090087084084084085086088090093097103109116124133141149156162168172177181185191196202207212217220222223224224223222220217214210205199194189184179174168162155149142137131126121116112108105103101100099099099099100101101102103104105107109112115119123127132136140144148152156160164168173178182188193199204210216221226230234237240243245247249250251251251252252253254254255255255254254252251249248246244242240237234231228225221218215211208204201197193188184179174169164158153147141136130125121116112109105102099096093090087084081079076073071068065062059056053051048046044042040039038037035034032031029028026025024022022021020020019019019019018018017016015014012011000000000000000000000000000000000000000000000000002003005006007008009010009008008007007007007007007008009011013014017020022026030036041049058067076088099111128142156172186201214227235243250252255253254249242232223214204193180171162154146138130124117111104099092087081076071066062059055050048047044040037034033030027023021020019017015014014013012010010009008007006006006005005004005004004004004004004004004004004003003003003003003003003003003002002002002002002002002002002002002002002002002001001001001001001001001001001001001001001001001001001001001001001001000000000000000000000000000000000001001001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001002005009013018025033042051059068078089099110121132143154165176187199207216223230236242244247248250252255255255254253249246243241237233227222220218212206201197192187181175168162155149143138134130125121118115113111106102100098095093089086084082080078077076074073071069066063061059056054052050048047045044043043042041039038036034032030030030029029028027026026025025024024023022022022021021020020019019019019018017016016015015015015015015014014014014013013012012012012012012012012011011011011011011011011010010010010010010010010010010010010009009009009009009009010009009008008008008008008008008008008007006006007007007006006006007006006006006006006006006005005005005005005005005005005005005005005005A000080110060820170856008700260005005629506364235511303240983031814534801790981461750516000000000000000000000110490712550181730242140000000000000000000000000000000000000000000000000001001003006011020035057087123162199228247255252241225206187170156145137130123118113109106103100096092088084080077073069066062059055052049046044041039038037036035034032031029028026025025024024024024024025025026026027027028028028029030032033034035036037037037038039040042043044046047048049050051053054056058060062063064066067068069070071072073074075076077078078079079080080081081082082083084085086087089090091092093094094094094094094093093094094095096097098099100100100099099098097096095095094093092091090088087085083082080078077075073072070068067065064062061060058057055053051049047046044042040038036035033032030029028027026026025024023022021019018017016015014014013013012012012011010010009009008007007007006006006006005005005004004003000000000000000000000000000000000000000000000000000001002002002003003003003003003003003003003003003003003003003003003003003003003003004004005006009011013017022028035042051061075086100115129150165179194212226236246248251255254250244240235225216207195184175163152143136127122115108102095091087084078075071068066062059054052051048044043040038036034030029027025024022021020019018016015013011010009008007006006006006005005005005005005005005005005005004004003003003003003003003003003003003003004003004003004003003003003003002003002002002002002002002002002002002002002002002002002002002001001001001001001001001001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001002004006010015018021027033042052059067075083090098108119129140148156167178186194203213223233240247247248247247248249251253254255254253252251242234231229223218211204198192186180179178175172168164158152147142138135133131131131125120118117113109109110108107103099097095093091089088088088089091084078076074072070069068065062058055054054052051051052050049046044042041041041039038037037035033032032031031030030030030027025023022021021020019020022022022022022022022021020020020020020019019017016017018018018018018016015016017017017016016017018018018017016016016016017016015015016015015014014014014014014014014013012012012011011010010010011012014013013014015014014014014014014014014014014014014014014014");
        }      
    }
    
    public static void HandleDataInput(String data)
    {       
        try
        {
            if(data.charAt(0) == Start_Block)
            {
                datarecieved = new StringBuilder();                
            }
            if(data.contains(String.valueOf(SUB)))
            {
                int endindex = data.indexOf(String.valueOf(SUB));
                datarecieved.append(data.substring(0, endindex));
                processMessage();
                datarecieved = new StringBuilder();
                if(data.substring(endindex).length()> 1)
                {
                    if(data.startsWith(String.valueOf(SUB)))
                        HandleDataInput(data.substring(endindex+2));
                    else                        
                        HandleDataInput(data.substring(endindex));
                }
            }
            else
            {
                datarecieved.append(data);
            }       
        }
        catch(Exception ex)
        {
            log.logger.PrintStackTrace(ex);
        }
    }
    
    private static String[] normalizeData(String data)
    {
        int[] normkeys = {4,4,4,4,3,3,3,3,3,4,4,4,3,3,4,3,3,3,4};
        String[] normformat ={"###.#","###.#","###.#","###.#",
            "##.#","##.#","##.#","#.##","##.#",
            "###.#","###.#","###.#","##.#","##.#","####","##.#","##.#",".###","###.#"};
        
         DecimalFormat myFormatter;
       // String output = myFormatter.format(value);
      
        String[] norm = new String[35];
       // int i=13;
        for(int i=0,start=1,indstart =0;i<normkeys.length;i++,start++)
        {           
            norm[start] = customFormat(data.substring(indstart, indstart+normkeys[i]),normformat[i]);
            //norm[start] = myFormatter.format(data.substring(indstart, indstart+normkeys[i])));
            indstart = indstart + normkeys[i];
            
            System.out.println("i:"+i+" indstart:"+indstart+"normkeys[i]:"+normkeys[i]);
        }
                
        return norm;
        
    }
    
    private static String customFormat(String value, String pattern)
    {
        String formated ="";
       int ind = 0;
       if(pattern.startsWith("."))
       {
           return "0."+ String.valueOf(Integer.parseInt(value));
       }
       
       try
       {
            formated = String.valueOf(Integer.parseInt(value));
           for(int i = pattern.length()-1,in=0;i>=0;i--,in++)
           {
               if(pattern.charAt(i) == '.')
               {
                   ind = in;
                   break;
               }
           }

            if (ind > 0)
            {
                 for(int i = value.length()-1,in=0;i>=0;i--,in++)
                 {
                    if(in == ind)
                    {
                        formated = value.substring(0,i+1)+"."+value.substring(i+1);
                        formated =String.valueOf(Float.parseFloat(formated));
                        break;
                    }

                 }
            }
       }catch(NumberFormatException ex)
       {
           formated = value;  
           log.logger.PrintStackTrace(ex);
       }
          
        
        return formated;
    }
    
    private static String getCorrectSpecimenID(String raw)
    {
        String ID = "";
        //String temp =raw;      
        
        if(settings.AUTO_SPECIMEN_ID)
        {
           ID = utilities.getSystemDate("yyyy") + raw;           
        }
        else
        {
            ID = raw;
        }
        
        return ID;
    }
    private static void processMessage()
    {
        if(null == datarecieved.toString() || datarecieved.toString().isEmpty())
            return;
               
        String DataTrimed = datarecieved.toString().substring(2);
                 
            int mID=0;
            float value = 0;
            boolean flag = false;
                           
                    String specimen_id = DataTrimed.substring(13, 17) + DataTrimed.substring(0, 7);
                   // specimen_id = getCorrectSpecimenID(specimen_id);
                    
                    String[] DataParts = normalizeData(DataTrimed.substring(21));
                    
                    for(int i=1;i<DataParts.length;i++)
                    {
                        if(null == DataParts[i])
                        {
                            continue;
                        }
                        
                        mID = getMeasureID(i);
                        if(mID > 0)
                        {
                            try
                            {
                                value = Float.parseFloat(DataParts[i].trim());
                            }catch(NumberFormatException e){
                                try{
                                value = Float.parseFloat(DataParts[i].trim());
                                }catch(NumberFormatException ex){}
                            
                            }
                            if(SaveResults(specimen_id, mID,value))
                            {
                                flag = true;
                            }
                        }

                    }
                    if(flag)
                    {
                         log.AddToDisplay.Display("Results with Code: "+specimen_id +" sent to BLIS sucessfully",DisplayMessageType.INFORMATION);
                    }
                    else
                    {
                         log.AddToDisplay.Display("Test with Code: "+specimen_id +" not Found on BLIS",DisplayMessageType.WARNING);
                    }
                
            
       
       
    }
    
    public void Stop()
    {
        if(Manager.closeOpenedPort())
        {
            log.AddToDisplay.Display("Port Closed sucessfully", log.DisplayMessageType.INFORMATION);
        }
    }
    
    private void setTestIDs()
     {
         String equipmentid = getSpecimenFilter(3);
         String blismeasureid = getSpecimenFilter(4);
        
         String[] equipmentids = equipmentid.split(",");
         String[] blismeasureids = blismeasureid.split(",");
         for(int i=0;i<equipmentids.length;i++)
         {
             testIDs.add(equipmentids[i]+";"+blismeasureids[i]);             
         }
        
     }    
  
    
    private static String getSpecimenFilter(int whichdata)
    {
        String data = "";
        xmlparser p = new xmlparser("configs/mindray/mindraybc2800.xml");
        try {
            data = p.getMicros60Filter(whichdata);           
        } catch (Exception ex) {
           log.logger.Logger(ex.getMessage());
        }        
        return data;        
    }
    
     private static int getMeasureID(int equipmentID)
     {
         int measureid = 0;
         for(int i=0;i<testIDs.size();i++)
         {
             if(testIDs.get(i).split(";")[0].equalsIgnoreCase(equipmentID + ""))
             {
                 measureid = Integer.parseInt(testIDs.get(i).split(";")[1]);
                 break;
             }
         }
         
         return measureid;
     }
     
    
    private static boolean SaveResults(String barcode,int MeasureID, float value)
    {
          boolean flag = false;       
          if("1".equals(BLIS.blis.saveResults(barcode,MeasureID,value,0)))
           {
              flag = true;
            }
                          
         return flag;
         
    }  
    
}
